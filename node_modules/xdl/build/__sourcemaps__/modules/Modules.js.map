{"version":3,"sources":["modules/Modules.js"],"names":["getAllNativeModules","getAllForPlatform","getAllNativeForExpoClientOnPlatform","getVersionableModulesForPlatform","getDetachableModules","getPublishableModules","doesVersionSatisfy","HIGHEST_KNOWN_VERSION","filter","moduleConfig","isNativeModule","mapForPlatform","platform","config","sdkVersion","expoSdkUniversalModulesConfigs","sdkVersions","map","includeInExpoClient","versionable","detachable","libName","version","versionRequirement","semver","satisfies"],"mappings":";;;;;;;;QAuBgBA,mB,GAAAA,mB;QAUAC,iB,GAAAA,iB;QAMAC,mC,GAAAA,mC;QASAC,gC,GAAAA,gC;QASAC,oB,GAAAA,oB;QAMAC,qB,GAAAA,qB;QAOAC,kB,GAAAA,kB;;;;AAlEhB;AAAA;AAAA;;;;AAEA;AAAA;AAAA;;;;AAeA,MAAMC,wBAAwB,WAA9B;;AAEO,SAASP,mBAAT,GAA+B;AACpC,SAAO,CAAC,6DAAD,EAAoC,oDAApC,EAA8DQ,MAA9D,CACLC,gBAAgBA,aAAaC,cADxB,CAAP;AAGF;;AAEA,SAASC,cAAT,CAAwBC,QAAxB,EAAgE;AAC9D,SAAOH,6BAAsBA,YAAtBA,EAAuCA,aAAaI,MAAbJ,CAAoBG,QAApBH,CAAvCA,CAAP;AACF;;AAEO,SAASR,iBAAT,CAA2BW,QAA3B,EAA+CE,UAA/C,EAAwF;AAC7F,SAAOC,2DACJP,MADIO,CACGN,gBAAgBH,mBAAmBQ,UAAnBR,EAA+BG,aAAaO,WAA5CV,CADnBS,EAEJE,GAFIF,CAEAJ,eAAeC,QAAfD,CAFAI,CAAP;AAGF;;AAEO,SAASb,mCAAT,CACLU,QADK,EAELE,UAFK,EAGgB;AACrB,SAAOb,kBAAkBW,QAAlBX,EAA4Ba,UAA5Bb,EAAwCO,MAAxCP,CACLQ,gBAAgBA,aAAaS,mBAAbT,IAAoCA,aAAaC,cAD5DT,CAAP;AAGF;;AAEO,SAASE,gCAAT,CACLS,QADK,EAELE,UAFK,EAGgB;AACrB,SAAOZ,oCAAoCU,QAApCV,EAA8CY,UAA9CZ,EAA0DM,MAA1DN,CAAiEO,gBAAgB;AACtF,WAAOA,aAAaU,WAApB;AACD,GAFMjB,CAAP;AAGF;;AAEO,SAASE,oBAAT,CAA8BQ,QAA9B,EAAkDE,UAAlD,EAA2F;AAChG,SAAOb,kBAAkBW,QAAlBX,EAA4Ba,UAA5Bb,EAAwCO,MAAxCP,CACLQ,gBAAgBA,aAAaC,cAAbD,IAA+BA,aAAaW,UADvDnB,CAAP;AAGF;;AAEO,SAASI,qBAAT,CAA+BS,UAA/B,EAAwE;AAC7E,SAAOC,2DAA+BP,MAA/BO,CACLN,gBACE,CAAC,CAACA,aAAaY,OAAf,IAA0Bf,mBAAmBQ,UAAnBR,EAA+BG,aAAaO,WAA5CV,CAFvBS,CAAP;AAIF;;AAEO,SAAST,kBAAT,CAA4BgB,OAA5B,EAA6CC,kBAA7C,EAAkF;AACvF,MAAID,YAAY,aAAhB,EAA+B;AAC7B,WAAOE,oCAAOC,SAAPD,CAAiBjB,qBAAjBiB,EAAwCD,kBAAxCC,CAAP;AACF;;AAEA,SAAOA,oCAAOC,SAAPD,CAAiBF,OAAjBE,EAA0BD,kBAA1BC,CAAP;AACF","file":"../../modules/Modules.js","sourcesContent":["/**\n * @flow\n */\n\nimport semver from 'semver';\n\nimport { expoSdkUniversalModulesConfigs, vendoredNativeModules } from './config';\n\ntype Platform = 'ios' | 'android';\n\ntype ModuleConfig = {\n  podName: string,\n  libName: string,\n  sdkVersions: string,\n  detachable: boolean,\n  isNativeModule: boolean,\n  subdirectory: string,\n  versionable: boolean,\n  includeInExpoClient: boolean,\n};\n\nconst HIGHEST_KNOWN_VERSION = '10000.0.0';\n\nexport function getAllNativeModules() {\n  return [...expoSdkUniversalModulesConfigs, ...vendoredNativeModules].filter(\n    moduleConfig => moduleConfig.isNativeModule\n  );\n}\n\nfunction mapForPlatform(platform: Platform): () => ModuleConfig {\n  return moduleConfig => ({ ...moduleConfig, ...moduleConfig.config[platform] });\n}\n\nexport function getAllForPlatform(platform: Platform, sdkVersion: string): Array<ModuleConfig> {\n  return expoSdkUniversalModulesConfigs\n    .filter(moduleConfig => doesVersionSatisfy(sdkVersion, moduleConfig.sdkVersions))\n    .map(mapForPlatform(platform));\n}\n\nexport function getAllNativeForExpoClientOnPlatform(\n  platform: Platform,\n  sdkVersion: string\n): Array<ModuleConfig> {\n  return getAllForPlatform(platform, sdkVersion).filter(\n    moduleConfig => moduleConfig.includeInExpoClient && moduleConfig.isNativeModule\n  );\n}\n\nexport function getVersionableModulesForPlatform(\n  platform: Platform,\n  sdkVersion: string\n): Array<ModuleConfig> {\n  return getAllNativeForExpoClientOnPlatform(platform, sdkVersion).filter(moduleConfig => {\n    return moduleConfig.versionable;\n  });\n}\n\nexport function getDetachableModules(platform: Platform, sdkVersion: string): Array<ModuleConfig> {\n  return getAllForPlatform(platform, sdkVersion).filter(\n    moduleConfig => moduleConfig.isNativeModule && moduleConfig.detachable\n  );\n}\n\nexport function getPublishableModules(sdkVersion: string): Array<ModuleConfig> {\n  return expoSdkUniversalModulesConfigs.filter(\n    moduleConfig =>\n      !!moduleConfig.libName && doesVersionSatisfy(sdkVersion, moduleConfig.sdkVersions)\n  );\n}\n\nexport function doesVersionSatisfy(version: string, versionRequirement: string): boolean {\n  if (version === 'UNVERSIONED') {\n    return semver.satisfies(HIGHEST_KNOWN_VERSION, versionRequirement);\n  }\n\n  return semver.satisfies(version, versionRequirement);\n}\n"],"sourceRoot":"/xdl@53.7.4/src"}
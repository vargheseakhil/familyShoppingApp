{"version":3,"sources":["credentials/IosCredentials.js"],"names":["async","username","appleTeamId","options","distCerts","await","getExistingUserCredentials","formatDistCerts","getExistingDistCerts","pushKeys","formatPushKeys","getExistingPushKeys","type","err","certs","Api","callMethodAsync","Error","map","usedByApps","userCredentialsId","rest","split","String","certId","certP12","certPassword","serialNumber","IosCodeSigning","findP12CertSerialNumber","let","name","join","value","distCertSerialNumber","provideFullCertificate","apnsKeyId","apnsKeyP8","provideFullPushKey","short"],"mappings":"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","file":"../../credentials/IosCredentials.js","sourcesContent":["/* @flow */\n\nimport Api from '../Api';\nimport * as IosCodeSigning from '../detach/IosCodeSigning';\n\nexport type Credentials = {\n  appleId?: string,\n  password?: string,\n  teamId?: string,\n  certP12?: string,\n  certPassword?: string,\n  pushP12?: string,\n  pushPassword?: string,\n  provisioningProfile?: string,\n  enterpriseAccount?: string,\n  // These are ids on the spaceship object (implementation detail), Spaceship::Portal::Certificate\n  certId?: string,\n  pushId?: string,\n  provisioningProfileId?: string,\n};\n\nexport type CredObject = {\n  name: string,\n  value: {\n    userCredentialsId?: string,\n    serialNumber?: string,\n  },\n};\n\nexport type CredsList = Array<CredObject>;\n\nexport async function getExistingDistCerts(\n  username: string,\n  appleTeamId: string,\n  options: { provideFullCertificate?: boolean } = {}\n): Promise<?CredsList> {\n  const distCerts = await getExistingUserCredentials(username, appleTeamId, 'dist-cert');\n  return formatDistCerts(distCerts, options);\n}\n\nexport function formatDistCerts(distCerts, options) {\n  return distCerts.map(({ usedByApps, userCredentialsId, certId, certP12, certPassword }) => {\n    const serialNumber = IosCodeSigning.findP12CertSerialNumber(certP12, certPassword);\n    let name = `Serial number: ${serialNumber}`;\n    if (certId) {\n      name = `${name}, Certificate ID: ${certId}`;\n    }\n    if (usedByApps) {\n      name = `Used in apps: ${usedByApps.join(', ')} (${name})`;\n    }\n    return {\n      value: {\n        distCertSerialNumber: serialNumber,\n        ...(options.provideFullCertificate\n          ? { certP12, certId, certPassword }\n          : { userCredentialsId: String(userCredentialsId) }),\n      },\n      name,\n    };\n  });\n}\n\nexport async function getExistingPushKeys(\n  username: string,\n  appleTeamId: string,\n  options: { provideFullPushKey?: boolean } = {}\n): Promise<?CredsList> {\n  const pushKeys = await getExistingUserCredentials(username, appleTeamId, 'push-key');\n  return formatPushKeys(pushKeys, options);\n}\n\nexport function formatPushKeys(pushKeys, options) {\n  return pushKeys.map(({ usedByApps, userCredentialsId, apnsKeyId, apnsKeyP8 }) => {\n    let name = `Key ID: ${apnsKeyId}`;\n    if (usedByApps) {\n      name = `Used in apps: ${usedByApps.join(', ')} (${name})`;\n    }\n    return {\n      value: {\n        ...(options.provideFullPushKey\n          ? { apnsKeyId, apnsKeyP8 }\n          : { userCredentialsId: String(userCredentialsId) }),\n      },\n      name,\n      short: apnsKeyId,\n    };\n  });\n}\n\nasync function getExistingUserCredentials(\n  username: string,\n  appleTeamId: string,\n  type: string\n): Promise<?CredsList> {\n  const { err, certs } = await Api.callMethodAsync('getExistingUserCredentials', [], 'post', {\n    username,\n    appleTeamId,\n    type,\n  });\n\n  if (err) {\n    throw new Error('Error getting existing distribution certificates.');\n  } else {\n    return certs.map(({ usedByApps, userCredentialsId, ...rest }) => ({\n      usedByApps: usedByApps && usedByApps.split(';'),\n      userCredentialsId: String(userCredentialsId),\n      ...rest,\n    }));\n  }\n}\n"],"sourceRoot":"/xdl@53.7.4/src"}